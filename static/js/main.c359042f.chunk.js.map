{"version":3,"sources":["unique.id.js","component/square/square.component.jsx","component/header/header.component.jsx","component/button/button.component.jsx","component/form.input/form.input.component.jsx","component/specs/specs.component.jsx","component/win/win.component.jsx","component/square.ui/square.ui.component.jsx","App.js","serviceWorker.js","index.js"],"names":["randomNum","str","Math","floor","random","length","uniqueId","type","arr","len","includes","Error","val","rem","i","push","map","a","char","id","getId","join","substring","Square","props","onClick","clicked","className","isOn","Header","Button","children","click","otherProps","FormInput","onChange","label","value","Spec","handleSubmit","handleChange","rows","cols","onSubmit","name","required","max","min","Win","SquareUi","state","squares","gameOver","start","randomVal","bind","genSquares","handleClick","handleReset","on","subarr","j","row","col","this","unique","setState","curState","square","split","every","event","target","preventDefault","style","gridTemplateColumns","gridTemplateRows","width","height","board","data","key","form","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ubAAMA,EAAY,SAACC,GACf,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,SA4BnC,IAuBQC,EAvBS,SAACD,EAAQE,GAC7B,IACI,IAAIC,EACAC,EACJ,GAAI,CAAC,MAAM,SAASC,SAASH,KAAWA,EAAM,CAC1C,GAAc,IAAXF,EAAc,MAAMM,MACvB,IAAMC,EAAMV,KAAKC,MAAME,EAAS,GAC1BQ,EAAMR,EAAS,EACfG,EAANK,EAAY,CAACA,GAAa,CAAC,GACrBJ,EAANI,EAAYD,EAAYA,EAAM,EAC9B,IAAI,IAAIE,EAAI,EAAGA,EAAIL,EAAKK,IACpBN,EAAIO,KAAK,GAEb,OAAOP,EAAIQ,KAAI,SAAAC,GAAC,iBAtC5B,SAAeZ,EAAQE,GACnB,IAGIW,EACAC,EAAK,GAGDZ,EAGa,QAATA,EACJW,EATS,aAUK,UAATX,IACLW,EAZU,wDAOVA,EARU,iEAgBd,IAAI,IAAIJ,EAAI,EAAGA,EAAIT,EAAQS,IACvBK,GAAMD,EAAKlB,EAAUkB,IAEzB,OAAOC,EAkBqBC,CAAMH,EAAGV,OAASc,KAAK,IAAIC,UAAU,GAE7D,MAAMX,MAEb,MAAMA,OACH,MAAQ,wJC/BDY,G,MAbA,SAACC,GAMZ,OACI,yBAAKC,QALO,WAChBD,EAAME,QAAQF,IAIiBG,UAAS,iBAAYH,EAAMI,KAAO,KAAO,WCE7DC,G,YARA,WACX,OACI,yBAAKF,UAAU,UACX,6CCSGG,G,YAbA,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,SAASC,EAA0B,EAA1BA,MAAUC,EAAgB,oCAChD,OACI,6BACI,0CACAR,QAAWO,GAASA,GAChBC,GAECF,MCcFG,G,MArBG,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,MAAUJ,EAAgB,4CAC3D,OACI,yBAAKN,UAAU,aACTS,GACN,2BACQT,UAAWU,GAAS,UAEvBD,GAGD,yCACAT,UAAU,SACNM,EAFJ,CAGAE,SAAWA,QCmBRG,EA9BF,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAC7C,OACI,6BACI,0BAAMf,UAAU,QAAQgB,SAAUJ,GAC9B,kBAAC,EAAD,CACAhC,KAAK,SACL6B,MAAM,OACNQ,KAAK,OACLP,MAASI,EACTN,SAAWK,EACXK,UAAQ,EACRC,IAAM,EACNC,IAAO,IAEP,kBAAC,EAAD,CACAxC,KAAK,SACL6B,MAAQ,UACRQ,KAAK,OACLP,MAASK,EACTP,SAAWK,EACXK,UAAQ,EACRC,IAAO,EACPC,IAAO,IAEP,kBAAC,EAAD,CAAQxC,KAAK,UAAb,iBCjBDyC,G,MATH,WACR,OACI,yBAAKrB,UAAU,OACZ,8CACA,0CC+HIsB,EA7Hf,YACI,WAAYzB,GAAO,IAAD,8BACd,4CAAMA,KACD0B,MAAQ,CACTC,QAAU,GACVV,KAAM,GACNC,KAAM,GACNU,UAAU,EACVC,OAAO,GAEf,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKf,aAAe,EAAKA,aAAae,KAAlB,gBACpB,EAAKhB,aAAe,EAAKA,aAAagB,KAAlB,gBACpB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBAdD,EADtB,yEAmBQ,IAAOI,EAAK,EAAC,GAAM,GAClB,OAAOA,EAAGzD,KAAKC,MAAMD,KAAKE,SAAWuD,EAAGtD,WApBjD,oCA0BS,IAHqB,IAAboC,EAAY,EAAZA,KAAMC,EAAM,EAANA,KACVlC,EAAM,GAEFM,EAAI,EAAGA,EAAI2B,EAAM3B,IAAI,CAE1B,IADA,IAAI8C,EAAS,GACLC,EAAI,EAAGA,EAAInB,EAAMmB,IACrBD,EAAO7C,KAAK,CAAC+C,IAAKhD,EAAE,EAAGiD,IAAKF,EAAE,EAAGjC,KAAMoC,KAAKV,YAAanC,GAAI8C,EAAO,MAExEzD,EAAIO,KAAK6C,GAEZ,OAAOpD,IAjChB,kFAuC4B,IAAD,OAAVsD,EAAU,EAAVA,IAAKC,EAAK,EAALA,IACdC,KAAKE,UAAS,SAAAC,GAAQ,MAAI,CACtBhB,QAAQ,YAAKgB,EAAShB,QAAQnC,KAAI,SAAAoD,GAAM,OAAIA,EAAOpD,KAAI,SAAAC,GACnD,OAAIA,EAAE6C,MAAQA,GAAO7C,EAAE8C,MAAQA,GAC1B9C,EAAE6C,MAAQA,EAAI,GAAK7C,EAAE8C,MAAQA,GAC7B9C,EAAE6C,MAAQA,EAAM,GAAK7C,EAAE8C,MAAQA,GAC/B9C,EAAE6C,MAAQA,GAAO7C,EAAE8C,MAAQA,EAAK,GAChC9C,EAAE6C,MAAQA,GAAO7C,EAAE8C,MAAQA,EAAI,GAChC9C,EAAEW,MAAQX,EAAEW,KACLX,GAEJA,aAEX,WACA,CAAC,EAAKiC,MAAMC,QAAQnC,KAAI,SAAAoD,GAAM,OAAIA,EAAOpD,KAAI,SAAAC,GAAC,OAAGA,EAAEW,YAClDP,KAAK,KAAKgD,MAAM,KAAKC,OAAM,SAAArD,GAAC,MAAS,UAANA,MAAkB,EAAKiD,SAAS,CAC5Dd,UAAU,SAvD1B,mCA4DiBmB,GAAO,IAAD,EACOA,EAAMC,OAArB5B,EADQ,EACRA,KAAMP,EADE,EACFA,MACb2B,KAAKE,SAAL,eACKtB,EAAOP,MA/DpB,mCAmEiBkC,GAAO,IAAD,OACfA,EAAME,iBACNT,KAAKE,UAAS,SAAAC,GAAQ,MAClB,CACId,OAAQc,EAASd,MACjBD,UAAU,EACVD,QAAQ,YAAK,EAAKK,WAAWW,UAzE7C,kCA8EgBI,GACRA,EAAME,iBACNT,KAAKE,UAAS,SAAAC,GAAQ,MAClB,CACId,OAAQc,EAASd,YAlFjC,+BAuFc,IAAD,SAC0CW,KAAKd,MAA7CC,EADF,EACEA,QAASV,EADX,EACWA,KAAMC,EADjB,EACiBA,KAAMW,EADvB,EACuBA,MAAOD,EAD9B,EAC8BA,SAC7BsB,EAAQ,CAACC,oBAAoB,UAAD,OAAYjC,EAAZ,UAClBkC,iBAAiB,UAAD,OAAYnC,EAAZ,UAChBoC,MAAM,GAAD,OAAY,EAAPnC,EAAL,OACLoC,OAAO,GAAD,OAAY,EAAPrC,EAAL,QAGhBsC,EACF,yBAAKpD,UAAU,WAAW+C,MAAOA,GACxBvB,EAAQnC,KAAI,SAAAoD,GAAM,OAAIA,EAAOpD,KAAI,gBAAEG,EAAF,EAAEA,GAAO6D,EAAT,6BAAmB,kBAAC,EAAD,eACrDC,IAAK9D,GACD6D,EAFiD,CAGrDtD,QAAW,EAAK+B,sBAItByB,EACF,kBAAC,EAAD,CACIzC,KAAOA,EACPC,KAAOA,EACPF,aAAgBwB,KAAKxB,aACrBD,aAAgByB,KAAKzB,eAG7B,OACI,6BACI,kBAAC,EAAD,OACEc,GAAS6B,EACT7B,IAAUD,GAAc2B,EACzB3B,GAAY,kBAAC,EAAD,MACZC,GAAU,kBAAC,EAAD,CAAQ9C,KAAK,SAASyB,MAAQgC,KAAKN,aAAnC,cAtH3B,GAA8ByB,aCIfC,MARf,WACE,OACE,yBAAKzD,UAAU,OACb,kBAAC,EAAD,QCIc0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c359042f.chunk.js","sourcesContent":["const randomNum = (str) =>{\r\n    return Math.floor(Math.random() * str.length )\r\n}\r\n\r\nfunction getId(length, type){\r\n    const character = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n    const alphachar = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\r\n    const numerals = '1234567890'\r\n    let char;\r\n    let id = '';\r\n\r\n    \r\n        if(!type){\r\n            char = character\r\n        }\r\n        else if(type === 'num'){\r\n            char = numerals\r\n        }else if(type === 'alpha'){\r\n            char = alphachar\r\n        }else{\r\n        }\r\n        for(let i = 0; i < length; i++){\r\n            id += char[randomNum(char)]\r\n        }\r\n        return id\r\n    }\r\n\r\n\r\n\r\nexport const uniqueId = (length, type)=>{\r\n    try{\r\n        let arr\r\n        let len \r\n        if (['num','alpha'].includes(type) || !(type)){\r\n            if(length === 0) throw Error;\r\n            const val = Math.floor(length / 5)\r\n            const rem = length % 5 \r\n            rem ? arr = [rem] : arr = [5]\r\n            rem ? len = val : len = val - 1\r\n            for(let i = 0; i < len; i++){\r\n                arr.push(4)\r\n            }\r\n            return arr.map(a => `-${getId(a, type)}`).join(\"\").substring(1, )\r\n        }else{\r\n            throw Error\r\n        }\r\n    }catch(Error){\r\n        return  \"length cannot be 0, use uniqId(length: number, type: string), type can be empty for alphanumeral values, 'alpha' for alphabets or 'num' for numbers\"\r\n    }\r\n}\r\n\r\n\r\nexport default uniqueId","import React from 'react';\r\nimport './square.style.css'\r\n\r\nconst Square = (props) => {\r\n\r\nconst handleClick = ()=>{\r\n    props.clicked(props)\r\n}\r\n\r\n    return (\r\n        <div onClick={handleClick} className={`Square ${props.isOn ? \"On\" : \"Off\" }`}>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport './header.style.css'\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"Header\">\r\n            <h1>Lights Out</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './button.style.css'\r\n\r\nconst Button = ({children,click, ...otherProps}) => {\r\n    return (\r\n        <div>\r\n            <button\r\n            onClick = {click && click}\r\n            {...otherProps}\r\n            >\r\n                {children}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './form.input.style.css'\r\n\r\nconst FormInput = ({onChange, label, value, ...otherProps}) => {\r\n    return (\r\n        <div className=\"FormGroup\">\r\n             {label && (\r\n        <label\r\n                className={value && \"shrink\"}\r\n        >\r\n            {label}\r\n        </label>\r\n        )}\r\n            <input\r\n            className=\"Input\"\r\n            {...otherProps}\r\n            onChange ={onChange}\r\n            />\r\n       \r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormInput;\r\n","import React from 'react';\r\nimport './specs.style.css'\r\nimport Button from '../button/button.component';\r\nimport FormInput from '../form.input/form.input.component';\r\n\r\nconst Spec = ({handleSubmit, handleChange, rows, cols}) => {\r\n    return (\r\n        <div>\r\n            <form className=\"Specs\" onSubmit={handleSubmit}>\r\n                <FormInput \r\n                type=\"number\"\r\n                label='Rows'\r\n                name='rows'\r\n                value = {rows}\r\n                onChange ={handleChange}\r\n                required\r\n                max= {7}\r\n                min = {4}\r\n                 />\r\n                <FormInput \r\n                type=\"number\"\r\n                label = \"Columns\"\r\n                name='cols'\r\n                value = {cols}\r\n                onChange ={handleChange}\r\n                required\r\n                max = {7}\r\n                min = {4}\r\n                 />\r\n                <Button type=\"submit\">Start Game</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spec;\r\n","import React from 'react';\r\nimport './win.style.css'\r\n\r\nconst Win = () => {\r\n    return (\r\n        <div className=\"Win\">\r\n           <h1>All Lights Out</h1> \r\n           <h1>YOU WIN</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Win;\r\n","import React, { Component } from 'react';\r\nimport unique from '../../unique.id'\r\nimport Square from '../square/square.component';\r\nimport './square.ui.style.css';\r\nimport Header from '../header/header.component'\r\nimport Specs from '../specs/specs.component';\r\nimport Win from '../win/win.component';\r\nimport Button from '../button/button.component';\r\n\r\nexport class SquareUi extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            squares : [],\r\n            rows: '',\r\n            cols: '',\r\n            gameOver: false,\r\n            start: false\r\n        }\r\n    this.randomVal = this.randomVal.bind(this)\r\n    this.genSquares = this.genSquares.bind(this)\r\n    this.handleClick = this.handleClick.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.handleReset = this.handleReset.bind(this)\r\n    }\r\n\r\n    randomVal(){\r\n        const  on = [true, false]\r\n         return on[Math.floor(Math.random() * on.length)]\r\n     }\r\n\r\n     genSquares({rows, cols}){\r\n         let arr = [];\r\n            \r\n         for(let i = 0; i < rows; i++){\r\n            let subarr = [];\r\n            for(let j = 0; j < cols; j++){\r\n                subarr.push({row: i+1, col: j+1, isOn: this.randomVal(), id: unique(16)})\r\n            }\r\n            arr.push(subarr)\r\n         } \r\n         return arr\r\n     }\r\n\r\n    componentDidMount(){\r\n          }\r\n\r\n    handleClick({row, col}){\r\n        this.setState(curState =>({\r\n            squares: [...curState.squares.map(square => square.map(a => {\r\n                if((a.row === row && a.col === col) ||\r\n                   ( a.row === row-1 && a.col === col) ||\r\n                    (a.row === row + 1 && a.col === col) ||\r\n                    (a.row === row && a.col === col+ 1) ||\r\n                    (a.row === row && a.col === col-1) ){\r\n                    a.isOn = !a.isOn\r\n                    return a\r\n                }\r\n                return a\r\n            }))]\r\n        }), () => {\r\n            [this.state.squares.map(square => square.map(a=> a.isOn))]\r\n            .join(',').split(',').every(a=> a === \"false\") && this.setState({\r\n                gameOver: true\r\n            }) \r\n        })\r\n    }\r\n\r\n    handleChange(event){\r\n        const {name, value} = event.target\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault()\r\n        this.setState(curState => (\r\n            {\r\n                start: !curState.start,\r\n                gameOver: false,\r\n                squares: [...this.genSquares(curState)]\r\n            }\r\n        )) \r\n    }\r\n\r\n    handleReset(event){\r\n        event.preventDefault()\r\n        this.setState(curState => (\r\n            {\r\n                start: !curState.start,\r\n            }\r\n        )) \r\n    }\r\n\r\n    render() {\r\n        const {squares, rows, cols, start, gameOver} = this.state\r\n        const style = {gridTemplateColumns: `repeat(${cols}, 1fr)`,\r\n                        gridTemplateRows: `repeat(${rows}, 1fr)`,\r\n                        width: `${cols * 3}rem`,\r\n                        height: `${rows * 3}rem`,\r\n                        }\r\n\r\n        const board = (\r\n            <div className=\"SquareUi\" style={style}>\r\n                    {squares.map(square => square.map(({id, ...data}) => <Square\r\n                    key={id}\r\n                    {...data}\r\n                    clicked = {this.handleClick}                  />))}\r\n                </div>\r\n        )\r\n\r\n        const form = (\r\n            <Specs \r\n                rows= {rows}\r\n                cols ={cols}\r\n                handleChange = {this.handleChange}\r\n                handleSubmit = {this.handleSubmit}\r\n            />\r\n        )\r\n        return (\r\n            <div>\r\n                <Header />\r\n                {!start && form}\r\n                {(start && !gameOver)  && board}\r\n                {gameOver && <Win />}\r\n                {start &&  <Button type=\"submit\" click ={this.handleReset}>Reset</Button>}\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default SquareUi;\r\n","import React from 'react';\nimport './App.css';\nimport SquareUi from './component/square.ui/square.ui.component';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SquareUi/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}